// Code generated by mockery v1.0.0
package mocks

import kafka "github.com/confluentinc/confluent-kafka-go/kafka"
import mock "github.com/stretchr/testify/mock"

// Customerable is an autogenerated mock type for the Customerable type
type Customerable struct {
	mock.Mock
}

// Assign provides a mock function with given fields: topicPartitions
func (_m *Customerable) Assign(topicPartitions []kafka.TopicPartition) error {
	ret := _m.Called(topicPartitions)

	var r0 error
	if rf, ok := ret.Get(0).(func([]kafka.TopicPartition) error); ok {
		r0 = rf(topicPartitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Customerable) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Events provides a mock function with given fields:
func (_m *Customerable) Events() chan kafka.Event {
	ret := _m.Called()

	var r0 chan kafka.Event
	if rf, ok := ret.Get(0).(func() chan kafka.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan kafka.Event)
		}
	}

	return r0
}

// SubscribeTopics provides a mock function with given fields: topics, rebalanceCb
func (_m *Customerable) SubscribeTopics(topics []string, rebalanceCb kafka.RebalanceCb) error {
	ret := _m.Called(topics, mock.Anything)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, kafka.RebalanceCb) error); ok {
		r0 = rf(topics, rebalanceCb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unassign provides a mock function with given fields:
func (_m *Customerable) Unassign() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
